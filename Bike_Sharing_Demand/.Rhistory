library("ggplot2", lib.loc="~/R/win-library/3.1")
data <- read.csv("dataassignment1.csv")
data$times <- strptime(paste(data$data1,data$Time)," %H:%M:%S")
View(data)
data$datetime <- as.POSIXct(paste(data$Date,data$Time),format="%d/%m/%Y %H:%M:%S")
View(data)
data$day <- weekdays(data$data1)
data$data1 <- as.Date(data$Date,"%d/%m/%Y")
data$day <- weekdays(data$data1)
View(data)
ggplot(data,aes(c(data$Sub_metering_1,data$Sub_metering_2,data$Sub_metering_3),data$datetime))+geom_line()
ggplot(data,aes(c(data$Sub_metering_1,data$Sub_metering_2,data$Sub_metering_3),data$datetime))+geom_smooth
ggplot(data,aes(c(data$Sub_metering_1,data$Sub_metering_2,data$Sub_metering_3),data$datetime))+geom_smooth()
g<- ggplot(data,aes(c(data$Sub_metering_1,data$Sub_metering_2,data$Sub_metering_3),data$datetime))
g + geom_smooth()
g<- ggplot(data,aes(data$Sub_metering_1,data$datetime))
g + geom_smooth()
g<- ggplot(data,aes(data$datetime,data$Sub_metering_1))
g + geom_smooth()
plot(data$datetime,data$Voltage,type="l",ylab="Global Active Power (Kilowatt)")
plot(data$datetime,data$Global_reactive_power,type="l",ylab="Global Active Power (Kilowatt)")
write.csv("data",data.csv)
write.csv(data,"data.csv")
plot(data$datetime,data$Global_active_power,type="l",ylab="Global Active Power (Kilowatt)")
datal <- data[order(data$datetime),]
plot(datal$datetime,datal$Global_active_power,type="l",ylab="Global Active Power (Kilowatt)")
plot(data$datetime,data$Sub_metering_1)
plot(data$datetime,data$Sub_metering_1,type="l")
lines(data$datetime,data$Sub_metering_2,type="l")
lines(data$datetime,data$Sub_metering_3,type="l")
plot(data$datetime,data$Sub_metering_1,type="l",col="Green")
lines(data$datetime,data$Sub_metering_2,type="l",col="Red")
lines(data$datetime,data$Sub_metering_3,type="l",col="Blue")
mfrow(2,2)
mrow(2,1)
par(mfrow(2,2))
par(mfrow=c(2,2))
plot(datal$datetime,datal$Global_active_power,type="l",ylab="Global Active Power (Kilowatt)")
plot(data$datetime,data$Global_reactive_power,type="l",ylab="Global Active Power (Kilowatt)")
plot(data$datetime,data$Voltage,type="l",ylab="Global Active Power (Kilowatt)")
plot(data$datetime,data$Sub_metering_1,type="l",col="Green")
lines(data$datetime,data$Sub_metering_2,type="l",col="Red")
lines(data$datetime,data$Sub_metering_3,type="l",col="Blue")
consumption <- read.table("household_power_consumption.txt",sep=";")
View(consumption)
consumption <- read.table("household_power_consumption.txt",sep=";",header=T)
View(consumption)
consumption$datetime <- stptime(paste(consumption$Date,consumption$Time),"%d/%m/%Y %H:%M:%S")
consumption$datetime <- strptime(paste(consumption$Date,consumption$Time),"%d/%m/%Y %H:%M:%S")
View(consumption)
consumption_data <- subset(consumption, datetime >= as.Date("2007-02-01") and datetime <= as.Date("2007-02-02") )
consumption_data <- subset(consumption, datetime >= as.Date("2007-02-01") && datetime <= as.Date("2007-02-02") )
consumption_data <- subset(consumption, datetime >= as.Date("2007-02-01") & datetime <= as.Date("2007-02-02") )
consumption_data <- subset(consumption, datetime >= as.Date("2007-02-01"))
consumption$dateformat <- as.Date(consumption$Date,"%d/%m/%Y")
consumption_data <- subset(consumption, dateformat >= as.Date("2007-02-01") &&
dateformat <= as.Date("2007-02-02") )
consumption_data <- subset(consumption, dateformat >= as.Date("2007-02-01"))
consumption_data <- subset(consumption_data, dateformat <= as.Date("2007-02-02"))
consumption_data <- subset(consumption, dateformat >= as.Date("2007-02-01") & dateformat <= as.Date("2007-02-02"))
consumption_data$day <- weekdays(consumption_data$dateformat)
View(consumption_data)
consumption_data <- consumption_data[order(consumption_data$datetime),]
View(consumption_data)
tail(consumption_data)
write.csv(consumption_data,"consumption_data$day.csv")
consumption_data <- read.csv("consumption_data.csv")
write.csv(consumption_data,"consumption_data.csv")
consumption_data <- read.csv("consumption_data.csv")
View(consumption_data)
hist(consumption_data$Global_Active_Power,col="Red",
xlab="Global Active Power (Kilowatts)",main="Global Active Power")
hist(as.numeric(consumption_data$Global_Active_Power),col="Red",
xlab="Global Active Power (Kilowatts)",main="Global Active Power")
hist(as.numeric(consumption_data$Global_Active_Power),col="Red",
xlab="Global Active Power (Kilowatts)",main="Global Active Power")
plot(as.numeric(consumption_data$Global_Active_Power),col="Red",
xlab="Global Active Power (Kilowatts)",main="Global Active Power")
hist(consumption_data$Global_Active_Power,col="Red",
xlab="Global Active Power (Kilowatts)",main="Global Active Power")
hist(consumption_data$Global_active_power,col="Red",
xlab="Global Active Power (Kilowatts)",main="Global Active Power")
View(consumption_data)
plot(consumption_data$datetime,consumption_data$Global_active_power,
ylab="Global Active Power (kilowatts)",type="l")
consumption_data <- read.csv("consumption_data.csv")
plot(consumption_data$datetime,consumption_data$Global_active_power,
ylab="Global Active Power (kilowatts)",type="l")
#Reading data
consumption <- read.table("household_power_consumption.txt",sep=";",header=T)
consumption$datetime <- as.POSIXct(paste(consumption$Date,consumption$Time),"%d/%m/%Y %H:%M:%S")
consumption$dateformat <- as.Date(consumption$Date,"%d/%m/%Y")
consumption_data <- subset(consumption, dateformat >= as.Date("2007-02-01") & dateformat <= as.Date("2007-02-02"))
consumption_data$day <- weekdays(consumption_data$dateformat)
consumption_data <- consumption_data[order(consumption_data$datetime),]
#subsetted clean file to be used for making plots
write.csv(consumption_data,"consumption_data.csv")
View(consumption_data)
consumption$datetime <- as.POSIXct(paste(consumption$Date,consumption$Time),format="%d/%m/%Y %H:%M:%S")
consumption$dateformat <- as.Date(consumption$Date,"%d/%m/%Y")
consumption_data <- subset(consumption, dateformat >= as.Date("2007-02-01") & dateformat <= as.Date("2007-02-02"))
consumption_data$day <- weekdays(consumption_data$dateformat)
consumption_data <- consumption_data[order(consumption_data$datetime),]
#subsetted clean file to be used for making plots
write.csv(consumption_data,"consumption_data.csv")
consumption_data <- read.csv("consumption_data.csv")
plot(consumption_data$datetime,consumption_data$Global_active_power,type="l",ylab="Global Active Power (kilowatts)")
View(consumption_data)
str(consumption_data)
consumption_data$datetime <- strptime(consumption_data$datetime,"%d/%m/%Y %H:%M:%S")
plot(consumption_data$datetime,consumption_data$Global_active_power,type="l")
str(consumption_data)
consumption_data <- read.csv("consumption_data.csv")
consumption_data$datetime1 <- strptime(consumption_data$datetime)
consumption_data$datetime1 <- strptime(consumption_data$datetime,format="%d/%m/%Y %H:%M:%S")
View(consumption_data)
plot(consumption_data$datetime,consumption_data$Global_active_power,type="l")
plot(consumption_data$datetime,consumption_data$Voltage,type="l")
plot(consumption_data$datetime,consumption_data$Voltage,type="l")
consumption_data <- read.csv("consumption_data.csv")
plot(consumption_data$datetime,consumption_data$Global_active_power,type="l",ylab="Global Active Power (kilowatts)")
View(data)
head(data)
ggplot(data,aes(datetime,Global_active_power))
ggplot(data,aes(datetime,Global_active_power))+geom_smooth()
library("ggplot2", lib.loc="~/R/win-library/3.1")
ggplot(data,aes(datetime,Global_active_power))+geom_smooth()
ggplot(data,aes(datetime,Global_active_power))+geom_lines(method="lm")
ggplot(data,aes(datetime,Global_active_power))+geom_line(method="lm")
ggplot(data,aes(datetime,Global_active_power),facets=day)+geom_line(method="lm",color="red")+geom_point(colour=c("green,blue"))
ggplot(data,aes(datetime,Global_active_power),facets=day)+geom_line(method="lm",color="red")+geom_point()
ggplot(data,aes(datetime,Global_active_power),facets=day)+geom_line(method="lm",color="red")+geom_point()
plot(data$datetime~data$Global_active_power|data$day)
library("datasets")
with(airquality,plot(ozone,month))
with(airquality,plot(Ozone,month))
with(airquality,plot(Ozone,Month))
with(airquality,plot(Month,Ozone))
with(airquality,plot(Wind,Ozone))
with(airquality,plot(Wind~Ozone|Month))
with(airquality,plot(Wind~Ozone))
with(airquality,plot(Wind~Ozone))
with(airquality,plot(Wind~Ozone),facets=as.factor(Month))
with(airquality,plot(Wind~Ozone),facets=as.factor(Month),col=c("red","blue","green","black","brown"))
with(airquality,plot(Wind~Ozone),facets=as.Factor(Month),col=c("red","blue","green","black","brown"))
with(airquality,plot(Wind~Ozone),facets=as.Factor(Month),col=c("red","blue","green","black","brown"))
with(subset(airquality,Month==5),plot(Wind,Ozone,col="Red"))
with(subset(airquality,Month==5),points(Wind,Ozone,col="Red"))
with(subset(airquality),points(Wind,Ozone,col="Red"))
with(subset(airquality),points(Wind,Ozone))
with(subset(airquality,Month==5),points(Wind,Ozone,col="Red"))
data1 <- read.csv("getdata-data-EDSTATS_Country")
data1 <- read.csv("getdata-data-EDSTATS_Country".csv)
data1 <- read.csv("getdata-data-EDSTATS_Country.csv")
data1 <- read.csv("getdata-data-EDSTATS_Country.csv")
data2 <- read.csv("getdata-data-GDP.csv")
View(data)
View(data1)
View(data2)
str(data1)
daat3 <- merge(x=data1,y=data2,by.x="CountryCode",by.y="x")
daat3 <- merge(x=data1,y=data2,by.x="data1$CountryCode",by.y="data2$x")
daat3 <- merge(x=data1,y=data2,by.x="data1$CountryCode",by.y="data2$X")
str(data2)
daat3 <- merge(x=data1,y=data2,by.x="as.character(data1$CountryCode)",by.y="as.character(data2$X)")
daat3 <- merge(x=data1,y=data2,by.x="CountryCode",by.y="X")
View(daat3)
daa <- daat3[order(-daat3$Gross.domestic.product.2012),]
daa <- daat3[-order(daat3$Gross.domestic.product.2012),]
daa <- daat3[order(-daat3$Gross.domestic.product.2012),]
daa <- daat3[order(daat3$Gross.domestic.product.2012),]
View(daa)
x <- na.omit(daa$Gross.domestic.product.2012)
x <- na.omit(daat3[(daa$Gross.domestic.product.2012),])
x <- na.omit(daat3)
daa$Gross.domestic.product.2012 <- as.numeric(daa$Gross.domestic.product.2012)
daa <- daa[order(daa$Gross.domestic.product.2012),]
View(daa)
daa <- daa[order(-daa$Gross.domestic.product.2012),]
View(daa)
daa[13,]
x <- subset(daa,daa$Income.Group=="High income: OECD")
mean(x$Gross.domestic.product.2012)
View(x)
mean(x$X.3)
mean(as.numeric(x$X.3))
x <- subset(daa,daa$Income.Group=="High income: nonOECD")
mean(as.numeric(x$X.3))
mean(x$Gross.domestic.product.2012)
daa <- daa3[order(-as.numeric(daa3$X.3)),]
daa <- daa[order(-as.numeric(daa3$X.3)),]
daa <- daa[order(-as.numeric(daa$X.3)),]
daa <- daa[1:38,]
table(daa$Income.Group)
x <- read.csv("getdata-data-ss06hid")
x <- read.csv("getdata-data-ss06hid.csv")
View(x)
x$logic <- if(x$VAL>=2 & ACR>3,"TRUE","FALSE")
x$logic <- ifelse(x$VAL>=2 & ACR>3,"TRUE","FALSE")
x$logic <- ifelse(x$VAL>=2 & x$ACR>3,"TRUE","FALSE")
which(x$logic=="TRUE")
which(x$logic)
View(x)
x$logic
str(x)
table(x$logic)
x$logic <- ifelse(x$AGS>=6 & x$ACR>3,"TRUE","FALSE")
which(x$logic=="TRUE")
x$logic
table(x$logic)
x$logic <- ifelse(x$AGS==6 & x$ACR==3,"TRUE","FALSE")
which(x$logic=="TRUE")
data <- red.csv("train.csv")
data <- read.csv("train.csv")
View(data)
str(data)
data$datetimes <- strptime(data$datetime,"%d/%m/%Y %H:%M:%S")
View(data)
data$datetimes <- strptime(data$datetime,"%Y/%m/%d %H:%M:%S")
View(data)
data$datetimes <- as.POSIXlt(as.character(data$datetime), format="%b %d, %Y %r")
View(data)
data$datetimes <- strptime(as.character(data$datetime),"%Y/%m/%d %H:%M:%S")
View(data)
data$datetimes <- strptime(as.character(data$datetime),"%d/%m/%Y %H:%M:%S")
View(data)
data$datetimes <- as.character(data$datetime)
View(data)
data$datetimess <-  as.POSIXlt(data$datetimes)
View(data)
par(mfrow=c(1,3))
boxplot(data$casual)
boxplot(data$registered)
boxplot(data$total)
boxplot(data$count)
par(mfrow=c(1,3))
boxplot(data$casual)
boxplot(data$registered)
boxplot(data$count)
install.packages("outliers")
library("outliers", lib.loc="~/R/win-library/3.1")
chisq.out.test(data$count,var(data$count))
H <- 1.5 * IQR(data$casual)
max(data$casual)
x <- data[which(data$casual>H),]
H1 <- 1.5 * IQR(data$registered)
max(data$registered)
x <- data[which(data$registered>H1),]
x <- data[which(data$casual>H),]
y <- data[which(data$registered>H1),]
H2 <- 1.5 * IQR(data$count)
max(data$count)
z <- data[which(data$count>H2),]
datax <- data[-which(data$casual>H),]
H3 <- 1.5 * IQR(datax$registered)
max(datax$registered)
a <- data[which(datax$registered>H3),]
dataa <- datax[-which(datax$registered>H3),]
H4 <- 1.5 * IQR(dataa$count)
max(dataa$count)
z <- dataa[which(dataa$count>H4),]
z <- dataa[-which(dataa$count>H4),]
par(mfrow=c(1,3))
boxplot(z$casual)
boxplot(z$registered)
boxplot(z$count)
a <- datax[which(datax$registered>H3),]
dataa <- datax[-which(datax$registered>H3),]
dataa <- datax[-which(datax$registered>H3),]
H4 <- 1.5 * IQR(dataa$count)
max(dataa$count)
z <- dataa[-which(dataa$count>H4),]
z <- dataa[-which(dataa$count>H4),]
data<- data[,-c(1,13)]
stepAIC(data)
library("MASS", lib.loc="C:/Program Files/R/R-3.1.0/library")
stepAIC(data)
stepAIC(data,count~.)
stepAIC(count~.,data)
stepAIC(count~.,data=data)
stepAIC(data$count~.)
x <- lm(count~.,data)
x <- lm(count~.-datetime,data)
x <- lm(count~.-data$datetime,data)
stepAIC(x)
stepAIC(x)
x <- lm(count~data[,c(1:11)],data)
x <- lm(count~data[,-12],data)
pairs(~ .,data=data,main="Simple Scatterplot Matrix")
View(data)
pairs(~season+holiday+workingday+weather+temp+atemp+humidity+windspeed+casual+registered+count+datetimess,data=data,main="Simple Scatterplot Matrix")
pairs(~season+holiday+workingday+weather+temp+atemp+humidity+windspeed+casual+registered+count,data=data,main="Simple Scatterplot Matrix")
pairs(~season+holiday+workingday+weather+temp+atemp+humidity+windspeed+casual+registered+count,data=data,main="Simple Scatterplot Matrix",type="p")
plot(datetimess,count)
plot(data$datetimess,data$count)
par(mfrow=c(1,1))
plot(data$datetimess,data$count)
plot(data$datetimess,data$count,type="p")
plot(data$datetimess,data$count,type="l")
plot(data$datetimess,data$count,type="p")
plot(data$datetimess,data$count,type="l")
summary(datitimess)
summary(data$datitimess)
summary(data)
plot(season,count)
plot(data$season,data$count)
boxplot(data$season,data$count)
plot(data$season,data$count)
boxplot(count~season,data)
boxplot(count~holiday,data)
boxplot(count~workingday,data)
boxplot(count~weather,data)
cor(pairs(~season+holiday+workingday+weather+temp+atemp+humidity+windspeed+casual+registered+count,data=data))
cor(~season+holiday+workingday+weather+temp+atemp+humidity+windspeed+casual+registered+count,data=data)
cor(~season+holiday+workingday+weather+temp+atemp+humidity+windspeed+casual+registered+count,data=data)
cor(~season+holiday+workingday+weather+temp+atemp+humidity+windspeed+casual+registered+count,data=data)
cor(data)
str(data)
cor(data)
?cor
dax <- data.frame(data)
cor(dax)
dax <- na.omit(dax)
cor(dax)
View(dax)
XY <- cor(dax)
cor(season,count)
cor(dax$season,dax$count)
cor(dax$holiday,dax$count)
cor(dax$workingday,dax$count)
cor(dax$weather,dax$count)
cor(dax$temp,dax$count)
cor(dax$atemp,dax$count)
cor(dax$humidity,dax$count)
cor(dax$windspeed,dax$count)
cor(dax$casual,dax$count)
cor(dax$regisered,dax$count)
cor(dax$registered,dax$count)
cor(dax$datetimess,dax$count)
cor(dax[,-1])
cor(dax[,-12])
boxplot(count~workingday,data)
url <- url("http://www.theatlantic.com/technology/archive/2014/01/how-netflix-reverse-engineered-hollywood/282679/")
htmlcode <- readLines(url)
library("httr", lib.loc="~/R/win-library/3.1")
install.packages("httr")
library("httr", lib.loc="~/R/win-library/3.1")
html2 <- GET(url)
html2 <- GET("http://www.theatlantic.com/technology/archive/2014/01/how-netflix-reverse-engineered-hollywood/282679/")
content2 <- content(html2.as="text")
content2 <- content(html2,as="text")
parsedhtml <- htmlParse(content2.asText=TRUE)
library("XML", lib.loc="~/R/win-library/3.1")
parsedhtml <- htmlParse(content2.asText=TRUE)
parsedhtml <- htmlParse(content2,asText=TRUE)
xpathsaPPLY(PARSEDHTML,"//TITLE",XMLVALUE)
xpathSApply(parsedhtml,"//title",xmlvalue)
xpathSApply(parsedhtml,"//title")
c<- xmlToDataFrame(parsedhtml)
xpathSApply(parsedhtml,"//")
xpathSApply(parsedhtml,"/n")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
head(NEI)
head(SCC)
min(NEI$year)
max(NEI$year)
nei_emission <- aggregate(Emissions~year,NEI)
nei_emission <- aggregate(Emissions~year,NEI,sum)
View(nei_emission)
table(NEI$year)
plot(nei_emission$year,nei_emission$Emissions,type="h",xlab="year",ylab="emmisions")
plot(nei_emission$year,nei_emission$Emissions,type="l",xlab="year",ylab="emmisions")
plot(nei_emission$year,nei_emission$Emissions,type="b",xlab="year",ylab="emmisions")
nei_baltimore <- subset(NEI,NEI$fips==24510)
nei_emission <- aggregate(Emissions~year,nei_baltimore,sum)
plot(nei_baltimore$year,nei_baltimore$Emissions,type="b",xlab="year",ylab="emmisions")
View(nei_emission)
plot(nei_baltimore$year,nei_baltimore$Emissions,type="b",xlab="year",ylab="emmisions")
plot(nei_emission$year,nei_emission$Emissions,type="b",xlab="year",ylab="emmisions")
View(SCC)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
scc1 <- subset(SCC,SCC.Level.Two=="Highway Vehicles - Diesel")
scc2 <- subset(SCC,SCC.Level.Two=="Highway Vehicles - Gasoline")
scc3 <- subset(SCC,SCC.Level.Two=="Off-highway Vehicle Diesel")
scc4 <- subset(SCC,SCC.Level.Two=="Off-highway Vehicle Gasoline, 2-Stroke")
scc5 <- subset(SCC,SCC.Level.Two=="Off-highway Vehicle Gasoline, 4-Stroke")
scc_all <- rbind(scc1,scc2,scc3,scc4,scc5)
nei_baltimore <- subset(NEI,NEI$fips==24510)
nei_scc <- merge(nei_baltimore,scc_all,by="SCC")
nei_emission <- aggregate(Emissions~year,nei_scc,sum)
plot(nei_emission$year,nei_emission$Emissions,type="b",xlab="year",ylab="emissions by motor vehicles in baltimore")
nei_los_angeles <- subset(NEI,NEI$fips==06037)
nei_all <- rbind(nei_baltimore,nei_los_angeles)
ifelse(nei_all$fips==24510,"Baltimore","Los Angeles")
View(NEI)
View(SCC)
table
table(SCC$fips)
table(NEI$fips)
nei_los_angeles <- subset(NEI,NEI$fips==06037)
nei_los_angeles <- subset(NEI,NEI$fips=="06037")
nei_all <- rbind(nei_baltimore,nei_los_angeles)
nei_all$county <- ifelse(nei_all$fips==24510,"Baltimore","Los Angeles")
nei_scc <- merge(nei_baltimore,scc_all,by="SCC")
nei_emission <- aggregate(Emissions~year+county,nei_scc,sum)
nei_scc <- merge(nei_all,scc_all,by="SCC")
nei_emission <- aggregate(Emissions~year+county,nei_scc,sum)
ggplot(nei_emission,aes(year,Emissions))+geom_point()+ geom_line()+facet_grid(county~.)
library("ggplot2")
ggplot(nei_scc,aes(year,Emissions))+geom_point()+ geom_line()+facet_grid(county~.)
ggplot(nei_emission,aes(year,Emissions))+geom_point()+ geom_line()+facet_grid(county~.)
ggplot(nei_emission,aes(year,Emissions))+geom_point()+ geom_line()+facet_grid(.~ county)
# required pakacges
library(twitteR)
library(sentiment)
library(plyr)
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
library(RCurL)
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "DudPk3BPfvFtaz6b2CRvI9bWv"
consumerSecret <- "B9zkcMden64fOXsQfgJAp7NjJZWoVHqejzTFaeBJGTxdcfF4KH"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
twitCred$handshake()
registerTwitterOAuth(twitCred)
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
movie <- searchTwitter('#HalfGirlfriend', n = 1500, cainfo = "cacert.pem")
save(movie, file = "holiday.Rdata")
ce <- twListToDF(movie)
write.csv(ce, file = "ce.csv")
data <- read.csv("ce.csv")
data <- data[,2]
corpus <- Corpus(VectorSource(data))
cleanset <- tm_map(corpus, tolower)
cleanset <- tm_map(cleanset, removePunctuation)
library("tm", lib.loc="~/R/win-library/3.1")
corpus <- Corpus(VectorSource(data))
cleanset <- tm_map(corpus, tolower)
cleanset <- tm_map(cleanset, removePunctuation)
cleanset <- tm_map(cleanset, removeNumbers)
cleanset<- tm_map(cleanset, stemDocument)
cleanset <- tm_map(cleanset, removeWords, c(stopwords("english"),"ekvillain","riteishd","movie"
,"tonight","watching","watch","shraddhakapoor",
"bhi","ive","rpi","aa","abt","sdharthm","film","amp","mohit"))
cleanset <- tm_map(cleanset, PlainTextDocument)
cleanset.tdm <- TermDocumentMatrix(cleanset)
# define tdm as matrix
cleanset.m <- as.matrix(cleanset.tdm)
cleanset.v <- sort(rowSums(cleanset.m), decreasing = T)
cleanset.d <- data.frame(word=names(cleanset.v), freq=cleanset.v)
write.csv(cleanset.d,"acf.csv")
wordcloud(cleanset.d$word, cleanset.d$freq, scale = c(3,.5),random.order=FALSE, colors=brewer.pal(8, "Dark2"),minfreq=2)
pos <- scan("positive-words.txt", what = 'character', comment.char = ';')
neg <- scan("negative-words.txt", what = 'character', comment.char = ';')
words <- cleanset.d
score.sentiment <- function(words, pos, neg, .progress='none')
{ require(plyr)
require(stringr)
final <- matrix('', 0 ,3)
words <- cleanset.d
scores = laply(words, function(words, pos, neg) {
# comparing words with the downloaded lexicon
positive <- match(words, pos)
negative <- match(words, neg)
positive <- sum(!is.na(positive))
negative <- sum(!is.na(negative))
score <- c(positive, negative)
newrow <- c(words, score)
final <- rbind(final, newrow)
return(score)
}, pos, neg, .progress=.progress )
scores.df = data.frame(score = scores, text = words)
return(scores.df)
}
final <- score.sentiment(words, pos, neg)
colnames(final) <- c("Positive", "Negative")
write.csv(final, file = "final.csv")
getwd()
setwd("C:/Users/Gaurav/Documents/GitHub/Kaggle_Competitions/Bike_Sharing_Demand")
getwd()
bike <- read.csv("train.csv")
bike$datetime <- as.POSIXlt(as.character(bike$datetime))
bike$year <- as.numeric(format(bike$datetime,"%Y"))
bike$month <- as.numeric(format(bike$datetime,"%m"))
bike$date <- as.numeric(format(bike$datetime,"%d"))
bike$hour <- as.numeric(format(bike$datetime,"%H"))
i <- 1
while(i<431)
{ flag[i+1]= bike_jan[i+1,16]-bike_jan[i,16]
i<- i+1}
bike_jan <- cbind(bike_jan,flag)
i <- 1
while(i<431)
{ flag[i+1]= bike_jan[i+1,16]-bike_jan[i,16]
i<- i+1}
bike_jan <- cbind(bike_jan,flag)
bike_jan <- 0
i <- 1
while(i<431)
{ flag[i+1]= bike_jan[i+1,16]-bike_jan[i,16]
i<- i+1}
bike_jan <- cbind(bike_jan,flag)
